import {Strategy as LocalStrategy} from 'passport-local';
import User from '../models/user.model';
import bcrypt from 'bcryptjs';

const configurePassport = (passport) => {
    passport.use(new LocalStrategy((username, password, done) => {
        User.findOne({username: username}, async (err, user)=> {
            if (err) { return done(err)};
            if (!user) {
                return done(null, false, {message: 'incorrect username'});
            }
            console.log(password, user.password)
            console.log(await bcrypt.compare(password, user.password));
            if (await bcrypt.compare(password,user.password)){
                return done(null, user)
            }
            done(null, false, {message: 'incorrect password'});
        })
    }));
    passport.serializeUser((user, done) => {
        //should probaby use the user's id generated by mongodb
        console.log(user);
        done(null, JSON.stringify(user));
    });
      
    passport.deserializeUser((id, done) => {
        //probably should be done(null, someservice.getuserbyid(id))
        return done(null, JSON.parse(id));
    });
      
}
export default {configurePassport};